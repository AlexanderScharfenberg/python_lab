# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cf
else:
    import _cf

try:
    import builtins as __builtin__
except ImportError:
    import builtins

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cf.delete_SwigPyIterator

    def value(self):
        return _cf.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cf.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cf.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cf.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cf.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cf.SwigPyIterator_copy(self)

    def next(self):
        return _cf.SwigPyIterator_next(self)

    def __next__(self):
        return _cf.SwigPyIterator___next__(self)

    def previous(self):
        return _cf.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cf.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cf.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cf:
_cf.SwigPyIterator_swigregister(SwigPyIterator)

class IteratedFunctionSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def read(self, filePath):
        return _cf.IteratedFunctionSystem_read(self, filePath)

    def getNumTransformations(self):
        return _cf.IteratedFunctionSystem_getNumTransformations(self)

    def getTransformation(self, pos):
        return _cf.IteratedFunctionSystem_getTransformation(self, pos)

    def getRangeX(self):
        return _cf.IteratedFunctionSystem_getRangeX(self)

    def getRangeY(self):
        return _cf.IteratedFunctionSystem_getRangeY(self)

    def getName(self):
        return _cf.IteratedFunctionSystem_getName(self)

    def getAllTransformation(self):
        return _cf.IteratedFunctionSystem_getAllTransformation(self)

    def __init__(self):
        _cf.IteratedFunctionSystem_swiginit(self, _cf.new_IteratedFunctionSystem())
    __swig_destroy__ = _cf.delete_IteratedFunctionSystem

# Register IteratedFunctionSystem in _cf:
_cf.IteratedFunctionSystem_swigregister(IteratedFunctionSystem)

class GEN(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def read(self, filePath):
        return _cf.GEN_read(self, filePath)

    def getRangeX(self):
        return _cf.GEN_getRangeX(self)

    def getRangeY(self):
        return _cf.GEN_getRangeY(self)

    def getName(self):
        return _cf.GEN_getName(self)

    def getInitiatorPoints(self):
        return _cf.GEN_getInitiatorPoints(self)

    def getInitiatorPointCount(self):
        return _cf.GEN_getInitiatorPointCount(self)

    def getInitiatorPoint(self, idx):
        return _cf.GEN_getInitiatorPoint(self, idx)

    def getGeneratorPoints(self):
        return _cf.GEN_getGeneratorPoints(self)

    def getGeneratorPointCount(self):
        return _cf.GEN_getGeneratorPointCount(self)

    def getGeneratorPoint(self, idx):
        return _cf.GEN_getGeneratorPoint(self, idx)

    def clearWindowEachTime(self):
        return _cf.GEN_clearWindowEachTime(self)

    def __init__(self):
        _cf.GEN_swiginit(self, _cf.new_GEN())
    __swig_destroy__ = _cf.delete_GEN

# Register GEN in _cf:
_cf.GEN_swigregister(GEN)

class Orbit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def read(self, filePath):
        return _cf.Orbit_read(self, filePath)

    def getRangeX(self):
        return _cf.Orbit_getRangeX(self)

    def getRangeY(self):
        return _cf.Orbit_getRangeY(self)

    def getName(self):
        return _cf.Orbit_getName(self)

    def getAllStartingPoints(self):
        return _cf.Orbit_getAllStartingPoints(self)

    def getAllFactors(self):
        return _cf.Orbit_getAllFactors(self)

    def getNumFactors(self):
        return _cf.Orbit_getNumFactors(self)

    def getNumStartingPoints(self):
        return _cf.Orbit_getNumStartingPoints(self)

    def __init__(self):
        _cf.Orbit_swiginit(self, _cf.new_Orbit())
    __swig_destroy__ = _cf.delete_Orbit

# Register Orbit in _cf:
_cf.Orbit_swigregister(Orbit)


def _removeWindowsSpecificCarriageReturn(str):
    return _cf._removeWindowsSpecificCarriageReturn(str)

def readPaletteFromFile(filePath):
    return _cf.readPaletteFromFile(filePath)

def readAntString(filePath):
    return _cf.readAntString(filePath)

def radian2degree(radianValue):
    return _cf.radian2degree(radianValue)

def degree2radian(degreeValue):
    return _cf.degree2radian(degreeValue)
class Direction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AbsoluteDirection_NORTH = _cf.Direction_AbsoluteDirection_NORTH
    AbsoluteDirection_EAST = _cf.Direction_AbsoluteDirection_EAST
    AbsoluteDirection_SOUTH = _cf.Direction_AbsoluteDirection_SOUTH
    AbsoluteDirection_WEST = _cf.Direction_AbsoluteDirection_WEST
    AbsoluteDirection_NUM_ABS_DIRS = _cf.Direction_AbsoluteDirection_NUM_ABS_DIRS
    RelativeDirection_LEFT = _cf.Direction_RelativeDirection_LEFT
    RelativeDirection_FORWARD = _cf.Direction_RelativeDirection_FORWARD
    RelativeDirection_RIGHT = _cf.Direction_RelativeDirection_RIGHT
    RelativeDirection_NUM_REL_DIRS = _cf.Direction_RelativeDirection_NUM_REL_DIRS

    @staticmethod
    def getNextiDirection(currentDirection, relativeMovement):
        return _cf.Direction_getNextiDirection(currentDirection, relativeMovement)

    @staticmethod
    def toString(*args):
        return _cf.Direction_toString(*args)

    def __init__(self):
        _cf.Direction_swiginit(self, _cf.new_Direction())
    __swig_destroy__ = _cf.delete_Direction

# Register Direction in _cf:
_cf.Direction_swigregister(Direction)

def Direction_getNextiDirection(currentDirection, relativeMovement):
    return _cf.Direction_getNextiDirection(currentDirection, relativeMovement)

def Direction_toString(*args):
    return _cf.Direction_toString(*args)

class Interval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _min=0, _max=0):
        _cf.Interval_swiginit(self, _cf.new_Interval(_min, _max))
    min = property(_cf.Interval_min_get, _cf.Interval_min_set)
    max = property(_cf.Interval_max_get, _cf.Interval_max_set)

    def getMin(self):
        return _cf.Interval_getMin(self)

    def getMax(self):
        return _cf.Interval_getMax(self)

    @staticmethod
    def translateIntervalPostion(*args):
        return _cf.Interval_translateIntervalPostion(*args)
    __swig_destroy__ = _cf.delete_Interval

# Register Interval in _cf:
_cf.Interval_swigregister(Interval)

def Interval_translateIntervalPostion(*args):
    return _cf.Interval_translateIntervalPostion(*args)

class Color(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, red=0, green=0, blue=0):
        _cf.Color_swiginit(self, _cf.new_Color(red, green, blue))
    b = property(_cf.Color_b_get, _cf.Color_b_set)
    g = property(_cf.Color_g_get, _cf.Color_g_set)
    r = property(_cf.Color_r_get, _cf.Color_r_set)

    def __mul__(self, value):
        return _cf.Color___mul__(self, value)

    def __truediv__(self, *args):
        return _cf.Color___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, value):
        return _cf.Color___imul__(self, value)

    def __itruediv__(self, *args):
        return _cf.Color___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, c):
        return _cf.Color___add__(self, c)

    def __sub__(self, c):
        return _cf.Color___sub__(self, c)

    def __iadd__(self, c):
        return _cf.Color___iadd__(self, c)

    def __isub__(self, c):
        return _cf.Color___isub__(self, c)

    def __eq__(self, c):
        return _cf.Color___eq__(self, c)

    def __ne__(self, c):
        return _cf.Color___ne__(self, c)

    def __lt__(self, c):
        return _cf.Color___lt__(self, c)

    def __gt__(self, c):
        return _cf.Color___gt__(self, c)

    def __le__(self, c):
        return _cf.Color___le__(self, c)

    def __ge__(self, c):
        return _cf.Color___ge__(self, c)

    def invert(self):
        return _cf.Color_invert(self)

    @staticmethod
    def RandomColor():
        return _cf.Color_RandomColor()
    __swig_destroy__ = _cf.delete_Color

# Register Color in _cf:
_cf.Color_swigregister(Color)

def Color_RandomColor():
    return _cf.Color_RandomColor()
cvar = _cf.cvar
Color.MAGENTA = _cf.cvar.Color_MAGENTA
Color.YELLOW = _cf.cvar.Color_YELLOW
Color.ORANGE = _cf.cvar.Color_ORANGE
Color.WHITE = _cf.cvar.Color_WHITE
Color.BLACK = _cf.cvar.Color_BLACK
Color.GREEN = _cf.cvar.Color_GREEN
Color.GREY = _cf.cvar.Color_GREY
Color.BLUE = _cf.cvar.Color_BLUE
Color.CYAN = _cf.cvar.Color_CYAN
Color.PINK = _cf.cvar.Color_PINK
Color.RED = _cf.cvar.Color_RED

class Console(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def readString():
        return _cf.Console_readString()

    @staticmethod
    def readFloat():
        return _cf.Console_readFloat()

    @staticmethod
    def readInt():
        return _cf.Console_readInt()

    @staticmethod
    def waitKey():
        return _cf.Console_waitKey()

    @staticmethod
    def clearConsole():
        return _cf.Console_clearConsole()

    def __init__(self):
        _cf.Console_swiginit(self, _cf.new_Console())
    __swig_destroy__ = _cf.delete_Console

# Register Console in _cf:
_cf.Console_swigregister(Console)

def Console_readString():
    return _cf.Console_readString()

def Console_readFloat():
    return _cf.Console_readFloat()

def Console_readInt():
    return _cf.Console_readInt()

def Console_waitKey():
    return _cf.Console_waitKey()

def Console_clearConsole():
    return _cf.Console_clearConsole()

class SimpleSignal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def waitSignal(self):
        return _cf.SimpleSignal_waitSignal(self)

    def fireSignal(self):
        return _cf.SimpleSignal_fireSignal(self)

    def __init__(self):
        _cf.SimpleSignal_swiginit(self, _cf.new_SimpleSignal())
    __swig_destroy__ = _cf.delete_SimpleSignal

# Register SimpleSignal in _cf:
_cf.SimpleSignal_swigregister(SimpleSignal)

class LindenmayerSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def read(self, filePath):
        return _cf.LindenmayerSystem_read(self, filePath)

    def getName(self):
        return _cf.LindenmayerSystem_getName(self)

    def getAxiom(self):
        return _cf.LindenmayerSystem_getAxiom(self)

    def getProduction(self, symbol):
        return _cf.LindenmayerSystem_getProduction(self, symbol)

    def getNumProductions(self):
        return _cf.LindenmayerSystem_getNumProductions(self)

    def clearWindowEachTime(self):
        return _cf.LindenmayerSystem_clearWindowEachTime(self)

    def getRangeX(self):
        return _cf.LindenmayerSystem_getRangeX(self)

    def getRangeY(self):
        return _cf.LindenmayerSystem_getRangeY(self)

    def getScale(self):
        return _cf.LindenmayerSystem_getScale(self)

    def getStartAngle(self):
        return _cf.LindenmayerSystem_getStartAngle(self)

    def getAdjustmentAngle(self):
        return _cf.LindenmayerSystem_getAdjustmentAngle(self)

    def getAllProductions(self):
        return _cf.LindenmayerSystem_getAllProductions(self)

    def __init__(self):
        _cf.LindenmayerSystem_swiginit(self, _cf.new_LindenmayerSystem())
    __swig_destroy__ = _cf.delete_LindenmayerSystem

# Register LindenmayerSystem in _cf:
_cf.LindenmayerSystem_swigregister(LindenmayerSystem)

class LSystem_Controller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, depth, LSystem):
        _cf.LSystem_Controller_swiginit(self, _cf.new_LSystem_Controller(depth, LSystem))

    def begin(self):
        return _cf.LSystem_Controller_begin(self)

    def end(self):
        return _cf.LSystem_Controller_end(self)

    def getCompleteString(self):
        return _cf.LSystem_Controller_getCompleteString(self)
    __swig_destroy__ = _cf.delete_LSystem_Controller

# Register LSystem_Controller in _cf:
_cf.LSystem_Controller_swigregister(LSystem_Controller)

class Window3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cf.delete_Window3D
    MouseButton_LEFT = _cf.Window3D_MouseButton_LEFT
    MouseButton_CENTER = _cf.Window3D_MouseButton_CENTER
    MouseButton_RIGHT = _cf.Window3D_MouseButton_RIGHT
    MouseButton_WHEEL_UP = _cf.Window3D_MouseButton_WHEEL_UP
    MouseButton_WHEEL_DOWN = _cf.Window3D_MouseButton_WHEEL_DOWN
    MouseButtonEvent_RELEASED = _cf.Window3D_MouseButtonEvent_RELEASED
    MouseButtonEvent_PRESSED = _cf.Window3D_MouseButtonEvent_PRESSED
    CameraType_NONE = _cf.Window3D_CameraType_NONE
    CameraType_ROTATION = _cf.Window3D_CameraType_ROTATION
    CameraType_FREE_MOVEMENT = _cf.Window3D_CameraType_FREE_MOVEMENT
    CameraType_STATIC_X_AXIS = _cf.Window3D_CameraType_STATIC_X_AXIS
    CameraType_STATIC_Y_AXIS = _cf.Window3D_CameraType_STATIC_Y_AXIS
    CameraType_STATIC_Z_AXIS = _cf.Window3D_CameraType_STATIC_Z_AXIS

    def handleMousePressedMovement(self, button, x, y):
        return _cf.Window3D_handleMousePressedMovement(self, button, x, y)

    def handleMousePressEvent(self, button, event, x, y):
        return _cf.Window3D_handleMousePressEvent(self, button, event, x, y)

    @staticmethod
    def printWindowUsage():
        return _cf.Window3D_printWindowUsage()

    def clear(self, *args):
        return _cf.Window3D_clear(self, *args)

    def draw(self):
        return _cf.Window3D_draw(self)

    def handleKeyboardInput(self, key, x, y):
        return _cf.Window3D_handleKeyboardInput(self, key, x, y)

    def startDrawing(self):
        return _cf.Window3D_startDrawing(self)

    def getWindowWidth(self):
        return _cf.Window3D_getWindowWidth(self)

    def getWindowHeight(self):
        return _cf.Window3D_getWindowHeight(self)

    def setCamera(self, *args):
        return _cf.Window3D_setCamera(self, *args)

    def drawAxis(self, length=10.):
        return _cf.Window3D_drawAxis(self, length)

    def forceDisplay(self):
        return _cf.Window3D_forceDisplay(self)

    def drawCylinder(self, *args):
        return _cf.Window3D_drawCylinder(self, *args)

    def drawSphere(self, *args):
        return _cf.Window3D_drawSphere(self, *args)

    def drawCube(self, *args):
        return _cf.Window3D_drawCube(self, *args)

    def setMaxFPS(self, maxFPS=0.):
        return _cf.Window3D_setMaxFPS(self, maxFPS)

    def enableLighting(self):
        return _cf.Window3D_enableLighting(self)

    def disableLighting(self):
        return _cf.Window3D_disableLighting(self)

# Register Window3D in _cf:
_cf.Window3D_swigregister(Window3D)

def Window3D_printWindowUsage():
    return _cf.Window3D_printWindowUsage()

class Window3DObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def disableLighting(self):
        return _cf.Window3DObject_disableLighting(self)

    def getWindowHeight(self):
        return _cf.Window3DObject_getWindowHeight(self)

    def getWindowWidth(self):
        return _cf.Window3DObject_getWindowWidth(self)

    def enableLighting(self):
        return _cf.Window3DObject_enableLighting(self)

    def drawCylinder(self, *args):
        return _cf.Window3DObject_drawCylinder(self, *args)

    def forceDisplay(self):
        return _cf.Window3DObject_forceDisplay(self)

    def drawSphere(self, *args):
        return _cf.Window3DObject_drawSphere(self, *args)

    def setMaxFPS(self, *args):
        return _cf.Window3DObject_setMaxFPS(self, *args)

    def setCamera(self, *args):
        return _cf.Window3DObject_setCamera(self, *args)

    def drawAxis(self, *args):
        return _cf.Window3DObject_drawAxis(self, *args)

    def drawCube(self, *args):
        return _cf.Window3DObject_drawCube(self, *args)

    def clear(self, *args):
        return _cf.Window3DObject_clear(self, *args)

    @staticmethod
    def createWindow3DObject(*args):
        return _cf.Window3DObject_createWindow3DObject(*args)
    __swig_destroy__ = _cf.delete_Window3DObject

    def setDrawingFunction(self, function):
        return _cf.Window3DObject_setDrawingFunction(self, function)

    def setKeyboardInputFunction(self, function):
        return _cf.Window3DObject_setKeyboardInputFunction(self, function)

    def setMousePressedMovementFunction(self, function):
        return _cf.Window3DObject_setMousePressedMovementFunction(self, function)

    def setMousePressEvent(self, function):
        return _cf.Window3DObject_setMousePressEvent(self, function)

    def waitKeyPressed(self, delay=0):
        return _cf.Window3DObject_waitKeyPressed(self, delay)

    def exit(self):
        return _cf.Window3DObject_exit(self)

# Register Window3DObject in _cf:
_cf.Window3DObject_swigregister(Window3DObject)

def Window3DObject_createWindow3DObject(*args):
    return _cf.Window3DObject_createWindow3DObject(*args)

class Window2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cf.Window2D_swiginit(self, _cf.new_Window2D(*args))
    __swig_destroy__ = _cf.delete_Window2D

    def show(self):
        return _cf.Window2D_show(self)

    def clear(self, *args):
        return _cf.Window2D_clear(self, *args)

    def waitKey(self, delay=0):
        return _cf.Window2D_waitKey(self, delay)

    def waitMouseInput(self, *args):
        return _cf.Window2D_waitMouseInput(self, *args)

    def setWindowDisplayScale(self, scale):
        return _cf.Window2D_setWindowDisplayScale(self, scale)

    def getWindowDisplayScale(self):
        return _cf.Window2D_getWindowDisplayScale(self)

    def setInvertYAxis(self, invert):
        return _cf.Window2D_setInvertYAxis(self, invert)

    def getInvertYAxis(self):
        return _cf.Window2D_getInvertYAxis(self)

    def setColor(self, x, y, color):
        return _cf.Window2D_setColor(self, x, y, color)

    def getColor(self, x, y):
        return _cf.Window2D_getColor(self, x, y)
    LineType_DEFAULT = _cf.Window2D_LineType_DEFAULT
    LineType_DOT_0 = _cf.Window2D_LineType_DOT_0
    LineType_DOT_1 = _cf.Window2D_LineType_DOT_1
    LineType_DOT_2 = _cf.Window2D_LineType_DOT_2
    LineType_DASH_0 = _cf.Window2D_LineType_DASH_0
    LineType_DASH_1 = _cf.Window2D_LineType_DASH_1
    LineType_DASH_2 = _cf.Window2D_LineType_DASH_2
    LineType_DOT_DASH_0 = _cf.Window2D_LineType_DOT_DASH_0
    LineType_DOT_DASH_1 = _cf.Window2D_LineType_DOT_DASH_1
    LineType_DOT_DASH_2 = _cf.Window2D_LineType_DOT_DASH_2

    def drawSpecializedLine(self, point1, point2, lineType, color):
        return _cf.Window2D_drawSpecializedLine(self, point1, point2, lineType, color)

    def setNewInterval(self, intervalX, intervalY):
        return _cf.Window2D_setNewInterval(self, intervalX, intervalY)

    def resetInterval(self):
        return _cf.Window2D_resetInterval(self)

    def saveImage(self, filePath):
        return _cf.Window2D_saveImage(self, filePath)

    def resize(self, pixelWidth, pixelHeight):
        return _cf.Window2D_resize(self, pixelWidth, pixelHeight)

    def flippHorizontal(self):
        return _cf.Window2D_flippHorizontal(self)

    def flippVertical(self):
        return _cf.Window2D_flippVertical(self)

    def getIntervalX(self):
        return _cf.Window2D_getIntervalX(self)

    def getIntervalY(self):
        return _cf.Window2D_getIntervalY(self)

    def getWidth(self):
        return _cf.Window2D_getWidth(self)

    def getHeight(self):
        return _cf.Window2D_getHeight(self)

    def getImage(self):
        return _cf.Window2D_getImage(self)

    def drawAxis(self, *args):
        return _cf.Window2D_drawAxis(self, *args)

    def floodFill(self, startingPoint, color):
        return _cf.Window2D_floodFill(self, startingPoint, color)

    def drawLine(self, *args):
        return _cf.Window2D_drawLine(self, *args)

    def drawRectangle(self, *args):
        return _cf.Window2D_drawRectangle(self, *args)

    def drawCircle(self, *args):
        return _cf.Window2D_drawCircle(self, *args)

    def drawCirclePart(self, *args):
        return _cf.Window2D_drawCirclePart(self, *args)

# Register Window2D in _cf:
_cf.Window2D_swigregister(Window2D)

class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cf.Point_x_get, _cf.Point_x_set)
    y = property(_cf.Point_y_get, _cf.Point_y_set)

    def __eq__(self, p):
        return _cf.Point___eq__(self, p)

    def __ne__(self, p):
        return _cf.Point___ne__(self, p)

    def __add__(self, p):
        return _cf.Point___add__(self, p)

    def __iadd__(self, p):
        return _cf.Point___iadd__(self, p)

    def __sub__(self, p):
        return _cf.Point___sub__(self, p)

    def __isub__(self, p):
        return _cf.Point___isub__(self, p)

    def __mul__(self, factor):
        return _cf.Point___mul__(self, factor)

    def __imul__(self, factor):
        return _cf.Point___imul__(self, factor)

    def __truediv__(self, *args):
        return _cf.Point___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _cf.Point___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __init__(self, *args):
        _cf.Point_swiginit(self, _cf.new_Point(*args))
    __swig_destroy__ = _cf.delete_Point

# Register Point in _cf:
_cf.Point_swigregister(Point)

class Line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cf.Line_swiginit(self, _cf.new_Line(*args))
    point1 = property(_cf.Line_point1_get, _cf.Line_point1_set)
    point2 = property(_cf.Line_point2_get, _cf.Line_point2_set)
    lineWidth = property(_cf.Line_lineWidth_get, _cf.Line_lineWidth_set)
    color = property(_cf.Line_color_get, _cf.Line_color_set)
    lineType = property(_cf.Line_lineType_get, _cf.Line_lineType_set)
    __swig_destroy__ = _cf.delete_Line

# Register Line in _cf:
_cf.Line_swigregister(Line)

class Rect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Point1, Point2, LineWidth, Color):
        _cf.Rect_swiginit(self, _cf.new_Rect(Point1, Point2, LineWidth, Color))
    point1 = property(_cf.Rect_point1_get, _cf.Rect_point1_set)
    point2 = property(_cf.Rect_point2_get, _cf.Rect_point2_set)
    lineWidth = property(_cf.Rect_lineWidth_get, _cf.Rect_lineWidth_set)
    color = property(_cf.Rect_color_get, _cf.Rect_color_set)
    __swig_destroy__ = _cf.delete_Rect

# Register Rect in _cf:
_cf.Rect_swigregister(Rect)

class Circle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Center, Radius, LineWidth, Color):
        _cf.Circle_swiginit(self, _cf.new_Circle(Center, Radius, LineWidth, Color))
    center = property(_cf.Circle_center_get, _cf.Circle_center_set)
    radius = property(_cf.Circle_radius_get, _cf.Circle_radius_set)
    lineWidth = property(_cf.Circle_lineWidth_get, _cf.Circle_lineWidth_set)
    color = property(_cf.Circle_color_get, _cf.Circle_color_set)
    __swig_destroy__ = _cf.delete_Circle

# Register Circle in _cf:
_cf.Circle_swigregister(Circle)

class CirclePartition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Center, Radius, StartAngle, EndAngle, LineWidth, Color):
        _cf.CirclePartition_swiginit(self, _cf.new_CirclePartition(Center, Radius, StartAngle, EndAngle, LineWidth, Color))
    center = property(_cf.CirclePartition_center_get, _cf.CirclePartition_center_set)
    radius = property(_cf.CirclePartition_radius_get, _cf.CirclePartition_radius_set)
    startAngle = property(_cf.CirclePartition_startAngle_get, _cf.CirclePartition_startAngle_set)
    endAngle = property(_cf.CirclePartition_endAngle_get, _cf.CirclePartition_endAngle_set)
    lineWidth = property(_cf.CirclePartition_lineWidth_get, _cf.CirclePartition_lineWidth_set)
    color = property(_cf.CirclePartition_color_get, _cf.CirclePartition_color_set)
    __swig_destroy__ = _cf.delete_CirclePartition

# Register CirclePartition in _cf:
_cf.CirclePartition_swigregister(CirclePartition)

class WindowRasterized(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cf.WindowRasterized_swiginit(self, _cf.new_WindowRasterized(*args))
    __swig_destroy__ = _cf.delete_WindowRasterized

    def clear(self, *args):
        return _cf.WindowRasterized_clear(self, *args)

    def drawCircle(self, *args):
        return _cf.WindowRasterized_drawCircle(self, *args)

    def drawLine(self, *args):
        return _cf.WindowRasterized_drawLine(self, *args)

    def drawRectangle(self, *args):
        return _cf.WindowRasterized_drawRectangle(self, *args)

    def drawSpecializedLine(self, point1, point2, lineType, color):
        return _cf.WindowRasterized_drawSpecializedLine(self, point1, point2, lineType, color)

    def flippHorizontal(self):
        return _cf.WindowRasterized_flippHorizontal(self)

    def flippVertical(self):
        return _cf.WindowRasterized_flippVertical(self)

    def floodFill(self, startingPoint, color):
        return _cf.WindowRasterized_floodFill(self, startingPoint, color)

    def getColor(self, x, y):
        return _cf.WindowRasterized_getColor(self, x, y)

    def getHeight(self):
        return _cf.WindowRasterized_getHeight(self)

    def getImage(self):
        return _cf.WindowRasterized_getImage(self)

    def getWidth(self):
        return _cf.WindowRasterized_getWidth(self)

    def getWindowDisplayScale(self):
        return _cf.WindowRasterized_getWindowDisplayScale(self)

    def resize(self, pixelWidth, pixelHeight):
        return _cf.WindowRasterized_resize(self, pixelWidth, pixelHeight)

    def saveImage(self, filePath):
        return _cf.WindowRasterized_saveImage(self, filePath)

    def setColor(self, x, y, color):
        return _cf.WindowRasterized_setColor(self, x, y, color)

    def setWindowDisplayScale(self, scale):
        return _cf.WindowRasterized_setWindowDisplayScale(self, scale)

    def show(self):
        return _cf.WindowRasterized_show(self)

    def waitKey(self, *args):
        return _cf.WindowRasterized_waitKey(self, *args)

    def waitMouseInput(self, *args):
        return _cf.WindowRasterized_waitMouseInput(self, *args)

# Register WindowRasterized in _cf:
_cf.WindowRasterized_swigregister(WindowRasterized)

class WindowVectorized(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cf.WindowVectorized_swiginit(self, _cf.new_WindowVectorized(*args))
    __swig_destroy__ = _cf.delete_WindowVectorized

    def setInterval(self, range_x, range_y, width):
        return _cf.WindowVectorized_setInterval(self, range_x, range_y, width)

    def transformPoint_fromInterval_toImage(self, point):
        return _cf.WindowVectorized_transformPoint_fromInterval_toImage(self, point)

    def transformPoint_fromImage_toInterval(self, point):
        return _cf.WindowVectorized_transformPoint_fromImage_toInterval(self, point)

    def convert_pixelLength_to_intervalLength(self, pixelLength):
        return _cf.WindowVectorized_convert_pixelLength_to_intervalLength(self, pixelLength)

    def convert_intervalLength_to_pixelLength(self, intervalLength):
        return _cf.WindowVectorized_convert_intervalLength_to_pixelLength(self, intervalLength)

    def getColor_imageSpace(self, x, y):
        return _cf.WindowVectorized_getColor_imageSpace(self, x, y)

    def setColor_imageSpace(self, x, y, color):
        return _cf.WindowVectorized_setColor_imageSpace(self, x, y, color)

    def clear(self, *args):
        return _cf.WindowVectorized_clear(self, *args)

    def drawAxis(self, *args):
        return _cf.WindowVectorized_drawAxis(self, *args)

    def drawCircle(self, *args):
        return _cf.WindowVectorized_drawCircle(self, *args)

    def drawCirclePart(self, *args):
        return _cf.WindowVectorized_drawCirclePart(self, *args)

    def drawLine(self, *args):
        return _cf.WindowVectorized_drawLine(self, *args)

    def drawRectangle(self, *args):
        return _cf.WindowVectorized_drawRectangle(self, *args)

    def drawSpecializedLine(self, point1, point2, lineType, color):
        return _cf.WindowVectorized_drawSpecializedLine(self, point1, point2, lineType, color)

    def floodFill(self, startingPoint, color):
        return _cf.WindowVectorized_floodFill(self, startingPoint, color)

    def getColor(self, x, y):
        return _cf.WindowVectorized_getColor(self, x, y)

    def getHeight(self):
        return _cf.WindowVectorized_getHeight(self)

    def getImage(self):
        return _cf.WindowVectorized_getImage(self)

    def getIntervalX(self):
        return _cf.WindowVectorized_getIntervalX(self)

    def getIntervalY(self):
        return _cf.WindowVectorized_getIntervalY(self)

    def getWidth(self):
        return _cf.WindowVectorized_getWidth(self)

    def getWindowDisplayScale(self):
        return _cf.WindowVectorized_getWindowDisplayScale(self)

    def saveImage(self, filePath):
        return _cf.WindowVectorized_saveImage(self, filePath)

    def setColor(self, x, y, color):
        return _cf.WindowVectorized_setColor(self, x, y, color)

    def setWindowDisplayScale(self, scale):
        return _cf.WindowVectorized_setWindowDisplayScale(self, scale)

    def show(self):
        return _cf.WindowVectorized_show(self)

    def waitKey(self, *args):
        return _cf.WindowVectorized_waitKey(self, *args)

    def waitMouseInput(self, *args):
        return _cf.WindowVectorized_waitMouseInput(self, *args)

# Register WindowVectorized in _cf:
_cf.WindowVectorized_swigregister(WindowVectorized)

class WindowCoordinateSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cf.WindowCoordinateSystem_swiginit(self, _cf.new_WindowCoordinateSystem(*args))
    __swig_destroy__ = _cf.delete_WindowCoordinateSystem

    def setInterval(self, range_x, range_y, width):
        return _cf.WindowCoordinateSystem_setInterval(self, range_x, range_y, width)

    def drawPoint(self, *args):
        return _cf.WindowCoordinateSystem_drawPoint(self, *args)

    def drawLine(self, *args):
        return _cf.WindowCoordinateSystem_drawLine(self, *args)

    def drawCircle(self, *args):
        return _cf.WindowCoordinateSystem_drawCircle(self, *args)

    def convert_pixelLength_to_intervalLength(self, pixelLength):
        return _cf.WindowCoordinateSystem_convert_pixelLength_to_intervalLength(self, pixelLength)

    def convert_intervalLength_to_pixelLength(self, intervalLength):
        return _cf.WindowCoordinateSystem_convert_intervalLength_to_pixelLength(self, intervalLength)

    def drawCirclePart(self, *args):
        return _cf.WindowCoordinateSystem_drawCirclePart(self, *args)

    def clear(self, *args):
        return _cf.WindowCoordinateSystem_clear(self, *args)

    def drawAxis(self, *args):
        return _cf.WindowCoordinateSystem_drawAxis(self, *args)

    def floodFill(self, startingPoint, color):
        return _cf.WindowCoordinateSystem_floodFill(self, startingPoint, color)

    def getColor(self, x, y):
        return _cf.WindowCoordinateSystem_getColor(self, x, y)

    def getHeight(self):
        return _cf.WindowCoordinateSystem_getHeight(self)

    def getIntervalX(self):
        return _cf.WindowCoordinateSystem_getIntervalX(self)

    def getIntervalY(self):
        return _cf.WindowCoordinateSystem_getIntervalY(self)

    def getWidth(self):
        return _cf.WindowCoordinateSystem_getWidth(self)

    def getWindowDisplayScale(self):
        return _cf.WindowCoordinateSystem_getWindowDisplayScale(self)

    def saveImage(self, filePath):
        return _cf.WindowCoordinateSystem_saveImage(self, filePath)

    def setColor(self, x, y, color):
        return _cf.WindowCoordinateSystem_setColor(self, x, y, color)

    def setWindowDisplayScale(self, scale):
        return _cf.WindowCoordinateSystem_setWindowDisplayScale(self, scale)

    def show(self):
        return _cf.WindowCoordinateSystem_show(self)

    def waitKey(self, *args):
        return _cf.WindowCoordinateSystem_waitKey(self, *args)

    def waitMouseInput(self, *args):
        return _cf.WindowCoordinateSystem_waitMouseInput(self, *args)

    def drawLinearEquation(self, *args):
        return _cf.WindowCoordinateSystem_drawLinearEquation(self, *args)

# Register WindowCoordinateSystem in _cf:
_cf.WindowCoordinateSystem_swigregister(WindowCoordinateSystem)

class PointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __mul__(self, rhs):
        return _cf.PointVector___mul__(self, rhs)

    def __imul__(self, rhs):
        return _cf.PointVector___imul__(self, rhs)

    def normalize(self):
        return _cf.PointVector_normalize(self)

    def isPointVector(self):
        return _cf.PointVector_isPointVector(self)

    def getX(self):
        return _cf.PointVector_getX(self)

    def getY(self):
        return _cf.PointVector_getY(self)

    def getW(self):
        return _cf.PointVector_getW(self)

    def setX(self, value):
        return _cf.PointVector_setX(self, value)

    def setY(self, value):
        return _cf.PointVector_setY(self, value)

    def setW(self, value):
        return _cf.PointVector_setW(self, value)

    def length(self):
        return _cf.PointVector_length(self)

    def getVector90Degree(self):
        return _cf.PointVector_getVector90Degree(self)

    def __eq__(self, rhs):
        return _cf.PointVector___eq__(self, rhs)

    def __ne__(self, rhs):
        return _cf.PointVector___ne__(self, rhs)

    def clone(self):
        return _cf.PointVector_clone(self)

    def add(self, *args):
        return _cf.PointVector_add(self, *args)

    def sub(self, *args):
        return _cf.PointVector_sub(self, *args)

    def innerProduct(self, *args):
        return _cf.PointVector_innerProduct(self, *args)

    def crossProduct(self, *args):
        return _cf.PointVector_crossProduct(self, *args)

    def multiply(self, rhs):
        return _cf.PointVector_multiply(self, rhs)

    def __init__(self, *args):
        _cf.PointVector_swiginit(self, _cf.new_PointVector(*args))
    __swig_destroy__ = _cf.delete_PointVector

# Register PointVector in _cf:
_cf.PointVector_swigregister(PointVector)

class DirectionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __mul__(self, rhs):
        return _cf.DirectionVector___mul__(self, rhs)

    def __imul__(self, rhs):
        return _cf.DirectionVector___imul__(self, rhs)

    def normalize(self):
        return _cf.DirectionVector_normalize(self)

    def isPointVector(self):
        return _cf.DirectionVector_isPointVector(self)

    def getX(self):
        return _cf.DirectionVector_getX(self)

    def getY(self):
        return _cf.DirectionVector_getY(self)

    def getW(self):
        return _cf.DirectionVector_getW(self)

    def setX(self, value):
        return _cf.DirectionVector_setX(self, value)

    def setY(self, value):
        return _cf.DirectionVector_setY(self, value)

    def setW(self, value):
        return _cf.DirectionVector_setW(self, value)

    def length(self):
        return _cf.DirectionVector_length(self)

    def getVector90Degree(self):
        return _cf.DirectionVector_getVector90Degree(self)

    def __eq__(self, rhs):
        return _cf.DirectionVector___eq__(self, rhs)

    def __ne__(self, rhs):
        return _cf.DirectionVector___ne__(self, rhs)

    def clone(self):
        return _cf.DirectionVector_clone(self)

    def add(self, *args):
        return _cf.DirectionVector_add(self, *args)

    def sub(self, *args):
        return _cf.DirectionVector_sub(self, *args)

    def innerProduct(self, *args):
        return _cf.DirectionVector_innerProduct(self, *args)

    def crossProduct(self, *args):
        return _cf.DirectionVector_crossProduct(self, *args)

    def multiply(self, rhs):
        return _cf.DirectionVector_multiply(self, rhs)

    def __init__(self, *args):
        _cf.DirectionVector_swiginit(self, _cf.new_DirectionVector(*args))
    __swig_destroy__ = _cf.delete_DirectionVector

# Register DirectionVector in _cf:
_cf.DirectionVector_swigregister(DirectionVector)


def readDatFilePointVector(filePath):
    return _cf.readDatFilePointVector(filePath)
class Math(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def addVec3Vec3(lhs, rhs):
        return _cf.Math_addVec3Vec3(lhs, rhs)

    @staticmethod
    def addVec4Vec4(lhs, rhs):
        return _cf.Math_addVec4Vec4(lhs, rhs)

    @staticmethod
    def addMat3x3Mat3x3(lhs, rhs):
        return _cf.Math_addMat3x3Mat3x3(lhs, rhs)

    @staticmethod
    def addMat4x4Mat4x4(lhs, rhs):
        return _cf.Math_addMat4x4Mat4x4(lhs, rhs)

    @staticmethod
    def subVec3Vec3(lhs, rhs):
        return _cf.Math_subVec3Vec3(lhs, rhs)

    @staticmethod
    def subVec4Vec4(lhs, rhs):
        return _cf.Math_subVec4Vec4(lhs, rhs)

    @staticmethod
    def subMat3x3Mat3x3(lhs, rhs):
        return _cf.Math_subMat3x3Mat3x3(lhs, rhs)

    @staticmethod
    def subMat4x4Mat4x4(lhs, rhs):
        return _cf.Math_subMat4x4Mat4x4(lhs, rhs)

    @staticmethod
    def multiplyMat3x3Mat3x3(lhs, rhs):
        return _cf.Math_multiplyMat3x3Mat3x3(lhs, rhs)

    @staticmethod
    def multiplyMat4x4Mat4x4(lhs, rhs):
        return _cf.Math_multiplyMat4x4Mat4x4(lhs, rhs)

    @staticmethod
    def multiplyVec3Mat3x3(lhs, rhs):
        return _cf.Math_multiplyVec3Mat3x3(lhs, rhs)

    @staticmethod
    def multiplyVec4Mat4x4(lhs, rhs):
        return _cf.Math_multiplyVec4Mat4x4(lhs, rhs)

    def __init__(self):
        _cf.Math_swiginit(self, _cf.new_Math())
    __swig_destroy__ = _cf.delete_Math

# Register Math in _cf:
_cf.Math_swigregister(Math)

def Math_addVec3Vec3(lhs, rhs):
    return _cf.Math_addVec3Vec3(lhs, rhs)

def Math_addVec4Vec4(lhs, rhs):
    return _cf.Math_addVec4Vec4(lhs, rhs)

def Math_addMat3x3Mat3x3(lhs, rhs):
    return _cf.Math_addMat3x3Mat3x3(lhs, rhs)

def Math_addMat4x4Mat4x4(lhs, rhs):
    return _cf.Math_addMat4x4Mat4x4(lhs, rhs)

def Math_subVec3Vec3(lhs, rhs):
    return _cf.Math_subVec3Vec3(lhs, rhs)

def Math_subVec4Vec4(lhs, rhs):
    return _cf.Math_subVec4Vec4(lhs, rhs)

def Math_subMat3x3Mat3x3(lhs, rhs):
    return _cf.Math_subMat3x3Mat3x3(lhs, rhs)

def Math_subMat4x4Mat4x4(lhs, rhs):
    return _cf.Math_subMat4x4Mat4x4(lhs, rhs)

def Math_multiplyMat3x3Mat3x3(lhs, rhs):
    return _cf.Math_multiplyMat3x3Mat3x3(lhs, rhs)

def Math_multiplyMat4x4Mat4x4(lhs, rhs):
    return _cf.Math_multiplyMat4x4Mat4x4(lhs, rhs)

def Math_multiplyVec3Mat3x3(lhs, rhs):
    return _cf.Math_multiplyVec3Mat3x3(lhs, rhs)

def Math_multiplyVec4Mat4x4(lhs, rhs):
    return _cf.Math_multiplyVec4Mat4x4(lhs, rhs)

class PointVectorContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, data):
        _cf.PointVectorContainer_swiginit(self, _cf.new_PointVectorContainer(data))

    def get(self, idx):
        return _cf.PointVectorContainer_get(self, idx)

    def setElement(self, idx, element):
        return _cf.PointVectorContainer_setElement(self, idx, element)

    def push_back(self, element):
        return _cf.PointVectorContainer_push_back(self, element)

    def erase(self, idx):
        return _cf.PointVectorContainer_erase(self, idx)

    def size(self):
        return _cf.PointVectorContainer_size(self)
    __swig_destroy__ = _cf.delete_PointVectorContainer

# Register PointVectorContainer in _cf:
_cf.PointVectorContainer_swigregister(PointVectorContainer)


def printVec3(rhs):
    return _cf.printVec3(rhs)

def printVec4(rhs):
    return _cf.printVec4(rhs)

def printMat3x3(rhs):
    return _cf.printMat3x3(rhs)

def printMat4x4(rhs):
    return _cf.printMat4x4(rhs)
class GlmVec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cf.delete_GlmVec3

    def __init__(self, *args):
        _cf.GlmVec3_swiginit(self, _cf.new_GlmVec3(*args))

    def at(self, idx):
        return _cf.GlmVec3_at(self, idx)

    def setVal(self, idx, val):
        return _cf.GlmVec3_setVal(self, idx, val)

    def internalFormat(self):
        return _cf.GlmVec3_internalFormat(self)

# Register GlmVec3 in _cf:
_cf.GlmVec3_swigregister(GlmVec3)

class GlmVec4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cf.delete_GlmVec4

    def __init__(self, *args):
        _cf.GlmVec4_swiginit(self, _cf.new_GlmVec4(*args))

    def at(self, idx):
        return _cf.GlmVec4_at(self, idx)

    def setVal(self, idx, val):
        return _cf.GlmVec4_setVal(self, idx, val)

    def internalFormat(self):
        return _cf.GlmVec4_internalFormat(self)

# Register GlmVec4 in _cf:
_cf.GlmVec4_swigregister(GlmVec4)

class GlmMat3x3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cf.delete_GlmMat3x3

    def __init__(self, *args):
        _cf.GlmMat3x3_swiginit(self, _cf.new_GlmMat3x3(*args))

    def at(self, column, row):
        return _cf.GlmMat3x3_at(self, column, row)

    def setVal(self, column, row, val):
        return _cf.GlmMat3x3_setVal(self, column, row, val)

    def internalFormat(self):
        return _cf.GlmMat3x3_internalFormat(self)

# Register GlmMat3x3 in _cf:
_cf.GlmMat3x3_swigregister(GlmMat3x3)

class GlmMat4x4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cf.delete_GlmMat4x4

    def __init__(self, *args):
        _cf.GlmMat4x4_swiginit(self, _cf.new_GlmMat4x4(*args))

    def at(self, column, row):
        return _cf.GlmMat4x4_at(self, column, row)

    def setVal(self, column, row, val):
        return _cf.GlmMat4x4_setVal(self, column, row, val)

    def internalFormat(self):
        return _cf.GlmMat4x4_internalFormat(self)

# Register GlmMat4x4 in _cf:
_cf.GlmMat4x4_swigregister(GlmMat4x4)

class StdVectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cf.StdVectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cf.StdVectorFloat___nonzero__(self)

    def __bool__(self):
        return _cf.StdVectorFloat___bool__(self)

    def __len__(self):
        return _cf.StdVectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _cf.StdVectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cf.StdVectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cf.StdVectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cf.StdVectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cf.StdVectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cf.StdVectorFloat___setitem__(self, *args)

    def pop(self):
        return _cf.StdVectorFloat_pop(self)

    def append(self, x):
        return _cf.StdVectorFloat_append(self, x)

    def empty(self):
        return _cf.StdVectorFloat_empty(self)

    def size(self):
        return _cf.StdVectorFloat_size(self)

    def swap(self, v):
        return _cf.StdVectorFloat_swap(self, v)

    def begin(self):
        return _cf.StdVectorFloat_begin(self)

    def end(self):
        return _cf.StdVectorFloat_end(self)

    def rbegin(self):
        return _cf.StdVectorFloat_rbegin(self)

    def rend(self):
        return _cf.StdVectorFloat_rend(self)

    def clear(self):
        return _cf.StdVectorFloat_clear(self)

    def get_allocator(self):
        return _cf.StdVectorFloat_get_allocator(self)

    def pop_back(self):
        return _cf.StdVectorFloat_pop_back(self)

    def erase(self, *args):
        return _cf.StdVectorFloat_erase(self, *args)

    def __init__(self, *args):
        _cf.StdVectorFloat_swiginit(self, _cf.new_StdVectorFloat(*args))

    def push_back(self, x):
        return _cf.StdVectorFloat_push_back(self, x)

    def front(self):
        return _cf.StdVectorFloat_front(self)

    def back(self):
        return _cf.StdVectorFloat_back(self)

    def assign(self, n, x):
        return _cf.StdVectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _cf.StdVectorFloat_resize(self, *args)

    def insert(self, *args):
        return _cf.StdVectorFloat_insert(self, *args)

    def reserve(self, n):
        return _cf.StdVectorFloat_reserve(self, n)

    def capacity(self):
        return _cf.StdVectorFloat_capacity(self)
    __swig_destroy__ = _cf.delete_StdVectorFloat

# Register StdVectorFloat in _cf:
_cf.StdVectorFloat_swigregister(StdVectorFloat)

class StdVectorGlmVec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cf.StdVectorGlmVec3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cf.StdVectorGlmVec3___nonzero__(self)

    def __bool__(self):
        return _cf.StdVectorGlmVec3___bool__(self)

    def __len__(self):
        return _cf.StdVectorGlmVec3___len__(self)

    def __getslice__(self, i, j):
        return _cf.StdVectorGlmVec3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cf.StdVectorGlmVec3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cf.StdVectorGlmVec3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cf.StdVectorGlmVec3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cf.StdVectorGlmVec3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cf.StdVectorGlmVec3___setitem__(self, *args)

    def pop(self):
        return _cf.StdVectorGlmVec3_pop(self)

    def append(self, x):
        return _cf.StdVectorGlmVec3_append(self, x)

    def empty(self):
        return _cf.StdVectorGlmVec3_empty(self)

    def size(self):
        return _cf.StdVectorGlmVec3_size(self)

    def swap(self, v):
        return _cf.StdVectorGlmVec3_swap(self, v)

    def begin(self):
        return _cf.StdVectorGlmVec3_begin(self)

    def end(self):
        return _cf.StdVectorGlmVec3_end(self)

    def rbegin(self):
        return _cf.StdVectorGlmVec3_rbegin(self)

    def rend(self):
        return _cf.StdVectorGlmVec3_rend(self)

    def clear(self):
        return _cf.StdVectorGlmVec3_clear(self)

    def get_allocator(self):
        return _cf.StdVectorGlmVec3_get_allocator(self)

    def pop_back(self):
        return _cf.StdVectorGlmVec3_pop_back(self)

    def erase(self, *args):
        return _cf.StdVectorGlmVec3_erase(self, *args)

    def __init__(self, *args):
        _cf.StdVectorGlmVec3_swiginit(self, _cf.new_StdVectorGlmVec3(*args))

    def push_back(self, x):
        return _cf.StdVectorGlmVec3_push_back(self, x)

    def front(self):
        return _cf.StdVectorGlmVec3_front(self)

    def back(self):
        return _cf.StdVectorGlmVec3_back(self)

    def assign(self, n, x):
        return _cf.StdVectorGlmVec3_assign(self, n, x)

    def resize(self, *args):
        return _cf.StdVectorGlmVec3_resize(self, *args)

    def insert(self, *args):
        return _cf.StdVectorGlmVec3_insert(self, *args)

    def reserve(self, n):
        return _cf.StdVectorGlmVec3_reserve(self, n)

    def capacity(self):
        return _cf.StdVectorGlmVec3_capacity(self)
    __swig_destroy__ = _cf.delete_StdVectorGlmVec3

# Register StdVectorGlmVec3 in _cf:
_cf.StdVectorGlmVec3_swigregister(StdVectorGlmVec3)


def Dereference(ptr):
    return _cf.Dereference(ptr)
class Lin3DCylinder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    diameter = property(_cf.Lin3DCylinder_diameter_get, _cf.Lin3DCylinder_diameter_set)
    color = property(_cf.Lin3DCylinder_color_get, _cf.Lin3DCylinder_color_set)
    position = property(_cf.Lin3DCylinder_position_get, _cf.Lin3DCylinder_position_set)
    direction = property(_cf.Lin3DCylinder_direction_get, _cf.Lin3DCylinder_direction_set)

    def __init__(self):
        _cf.Lin3DCylinder_swiginit(self, _cf.new_Lin3DCylinder())
    __swig_destroy__ = _cf.delete_Lin3DCylinder

# Register Lin3DCylinder in _cf:
_cf.Lin3DCylinder_swigregister(Lin3DCylinder)

class WindowLin3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cf.WindowLin3D_swiginit(self, _cf.new_WindowLin3D(*args))

    def setCylinders(self, cylinders):
        return _cf.WindowLin3D_setCylinders(self, cylinders)

    def getCylinders(self):
        return _cf.WindowLin3D_getCylinders(self)

    def waitKeyPressed(self, delay=0):
        return _cf.WindowLin3D_waitKeyPressed(self, delay)
    __swig_destroy__ = _cf.delete_WindowLin3D

# Register WindowLin3D in _cf:
_cf.WindowLin3D_swigregister(WindowLin3D)

class LinCylinderVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cf.LinCylinderVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cf.LinCylinderVec___nonzero__(self)

    def __bool__(self):
        return _cf.LinCylinderVec___bool__(self)

    def __len__(self):
        return _cf.LinCylinderVec___len__(self)

    def __getslice__(self, i, j):
        return _cf.LinCylinderVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cf.LinCylinderVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cf.LinCylinderVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cf.LinCylinderVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cf.LinCylinderVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cf.LinCylinderVec___setitem__(self, *args)

    def pop(self):
        return _cf.LinCylinderVec_pop(self)

    def append(self, x):
        return _cf.LinCylinderVec_append(self, x)

    def empty(self):
        return _cf.LinCylinderVec_empty(self)

    def size(self):
        return _cf.LinCylinderVec_size(self)

    def swap(self, v):
        return _cf.LinCylinderVec_swap(self, v)

    def begin(self):
        return _cf.LinCylinderVec_begin(self)

    def end(self):
        return _cf.LinCylinderVec_end(self)

    def rbegin(self):
        return _cf.LinCylinderVec_rbegin(self)

    def rend(self):
        return _cf.LinCylinderVec_rend(self)

    def clear(self):
        return _cf.LinCylinderVec_clear(self)

    def get_allocator(self):
        return _cf.LinCylinderVec_get_allocator(self)

    def pop_back(self):
        return _cf.LinCylinderVec_pop_back(self)

    def erase(self, *args):
        return _cf.LinCylinderVec_erase(self, *args)

    def __init__(self, *args):
        _cf.LinCylinderVec_swiginit(self, _cf.new_LinCylinderVec(*args))

    def push_back(self, x):
        return _cf.LinCylinderVec_push_back(self, x)

    def front(self):
        return _cf.LinCylinderVec_front(self)

    def back(self):
        return _cf.LinCylinderVec_back(self)

    def assign(self, n, x):
        return _cf.LinCylinderVec_assign(self, n, x)

    def resize(self, *args):
        return _cf.LinCylinderVec_resize(self, *args)

    def insert(self, *args):
        return _cf.LinCylinderVec_insert(self, *args)

    def reserve(self, n):
        return _cf.LinCylinderVec_reserve(self, n)

    def capacity(self):
        return _cf.LinCylinderVec_capacity(self)
    __swig_destroy__ = _cf.delete_LinCylinderVec

# Register LinCylinderVec in _cf:
_cf.LinCylinderVec_swigregister(LinCylinderVec)



